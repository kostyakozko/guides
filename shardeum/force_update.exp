#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jan 30 09:02:12 2024
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./installer.sh
match_max 100000
expect -exact "Linux environment with x86_64 found.\r
During this early stage of Betanet the Shardeum team will be collecting some performance and debugging info from your node to help improve future versions of the software.\r
This is only temporary and will be discontinued as we get closer to mainnet.\r
Thanks for running a node and helping to make Shardeum better.\r
\r
By running this installer, you agree to allow the Shardeum team to collect this data. (Y/n)?: "
send -- "\r"
expect -exact "\r
What base directory should the node use (default ~/.shardeum): "
send -- "\r"
expect -exact "\r
The base directory is set to: /root/.shardeum\r
docker-compose is installed on this machine\r
Docker daemon is running\r"
expect -exact "Existing container found. Reading settings from container.\r
\[sPreparing to copy...\[?25l\[u\[2KCopying from container - 0B\[?25h\[u\[2KSuccessfully copied 2.05kB to /root/./\r
Reusing secrets.json from container\r
The installer was unable to determine if the existing node is active.\r
    An active node unexpectedly leaving the network will lose it's stake amount.\r
    Do you really want to upgrade now (y/N)?"
send -- "y\r"
expect -exact "\r
#########################\r
# 0. GET INFO FROM USER #\r
#########################\r
\r
Do you want to run the web based Dashboard? (Y/n): "
send -- "n\r"
expect -exact "n\r
Do you want to change the password for the Dashboard? (y/N): "
send -- "n\r"
expect -exact "n\r
\r
Enter the port (1025-65536) to access the web based Dashboard (default 8080): "
send -- "\r"
expect -exact "\r
If you wish to set an explicit external IP, enter an IPv4 address (default=auto): "
send -- "\r"
expect -exact "\r
If you wish to set an explicit internal IP, enter an IPv4 address (default=auto): "
send -- "\r"
expect -exact "\r
To run a validator on the Sphinx network, you will need to open two ports in your firewall.\r
This allows p2p communication between nodes. Enter the first port (1025-65536) for p2p communication (default 9001): "
send -- "\r"
expect -exact "\r
Enter the second port (1025-65536) for p2p communication (default 10001): "
send -- "\r"
expect eof
